#!/usr/bin/env python

import os
import glob
import sys
import socket
import hashlib

sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages/')[0])

from chord import FileStore
from chord.ttypes import SystemException, RFileMetadata, RFile, NodeID
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

class FileStoreHandler:
    def __init__(self):
        self.my_dir = {}
        #self.ip = socket.gethostname()+".cs.binghamton.edu"
        self.ip = socket.gethostbyname(socket.gethostname())
        self.fingerTable = []
        self.port = sys.argv[1]
        self.id = hashlib.sha256(self.ip+":"+port).hexdigest()
        self.self_node = NodeID(self.id, self.ip, int(self.port))

    def writeFile(self, rFile):
        file_owner = rFile.meta.owner
        file_name = rFile.meta.filename
        key = hashlib.sha256(file_owner+":"+file_name).hexdigest()
        succ = self.findSucc(key)
        if succ.id == self.id:
            if file_name in self.my_dir:
                old_file = self.my_dir[file_name]
                if old_file.meta.owner == file_owner:
                    rFile.meta.version = old_file.meta.version + 1
                    rFile.meta.contentHash = hashlib.sha256(rFile.content).hexdigest()               
                    self.my_dir[file_name] = rFile
                else:
                    raise SystemException("File "+file_name+" exists on the server, but is not owned by "+file_owner)
            else:
                new_file = open(file_name, "w")
                new_file.write(rFile.content)
                new_file.close()
                rFile.meta.version = 0
                rFile.meta.contentHash = hashlib.sha256(rFile.content).hexdigest()
                self.my_dir[file_name] = rFile
        else:
            raise SystemException("Server "+self.ip+":"+self.port+" does not own the file id "+ key)

    def readFile(self, filename, owner):
        key = hashlib.sha256(owner+":"+filename).hexdigest()
        if filename in self.my_dir:
            if owner == self.my_dir[filename].meta.owner:
                return self.my_dir[filename]
            else:
                raise SystemException("File "+filename+" exists on the server, but is not owned by "+owner)   
        else:
            raise SystemException("Server "+self.ip+":"+self.port+" does not own the file id "+ key)

    def setFingertable(self, node_list):
        self.fingerTable = node_list

    def findSucc(self, key):
        succ = self.findPred(key)
        if succ.id == self.id or self.id == key:
            final_node = self.getNodeSucc()
            return final_node
        else:
            transport = TSocket.TSocket(succ.ip, succ.port)
            protocol = TBinaryProtocol.TBinaryProtocol(transport)
            client = FileStore.Client(protocol)
            transport.open()
            actual_node = client.getNodeSucc()
            return actual_node

    def findPred(self, key):
        if len(self.fingerTable) == 0:
            raise SystemException("Server "+self.ip+":"+self.port+" has no finger table.")
        succ = self.getNodeSucc()
        if self.hash_compare_closed(key, self.id, succ.id):
            return self.self_node
        else:
            list_len = len(self.fingerTable)
            for i in range(list_len-1, 0, -1):
                if self.fingerTable[i].id == self.id:
                    continue
                if self.hash_compare_open(self.fingerTable[i].id, self.id, key):
                    transport = TSocket.TSocket(self.fingerTable[i].ip, self.fingerTable[i].port)
                    protocol = TBinaryProtocol.TBinaryProtocol(transport)
                    client = FileStore.Client(protocol)
                    transport.open()
                    actual_node = client.findPred(key)
                    return actual_node

    def getNodeSucc(self):
        if len(self.fingerTable) == 0:
            raise SystemException("Server "+self.ip+":"+self.port+" has no finger table.")
        return self.fingerTable[0]

    def hash_compare_closed(self, key, hash1, hash2):
        if hash1 == hash2:
            return True
        if hash2<hash1:
            if key>hash1 or key<=hash2:
                return True
        else:
            if key>hash1 and key<=hash2:
                return True
        return False

    def hash_compare_open(self, key, hash1, hash2):
        if hash1 == hash2:
            return True
        if hash2<hash1:
            if key>hash1 or key<hash2:
                return True
        else:
            if key>hash1 and key<hash2:
                return True
        return False

if __name__ == '__main__':
    port = sys.argv[1]
    handler = FileStoreHandler()
    processor = FileStore.Processor(handler)
    transport = TSocket.TServerSocket('0.0.0.0', port)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    print "Server is running on "+ handler.ip + ":" + handler.port
    server.serve()